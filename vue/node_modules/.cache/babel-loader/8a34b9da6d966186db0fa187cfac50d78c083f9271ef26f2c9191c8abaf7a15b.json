{"ast":null,"code":"import request from \"@/utils/request\";\nimport emojis from \"@/assets/emoji\";\nlet client;\nexport default {\n  data() {\n    return {\n      user: {},\n      permission: [],\n      emojis: [],\n      messages: [],\n      users: {},\n      fromUser: '',\n      toUser: '',\n      toAvatar: '',\n      unRead: {}\n    };\n  },\n  // 页面加载的时候，做一些事情，在created里面\n  mounted() {\n    this.emojis = emojis.split(',');\n    // this.user = JSON.parse(localStorage.getItem('user') || \"{}\")\n    this.fromUser = this.user.role + '_' + this.user.name;\n\n    // client = new WebSocket(`ws://localhost:8080/imserverSingle`)\n    // client.onopen = () => {\n    //   console.log('websocket open')\n    // }\n    // client.onclose = () => {  // 页面刷新的时候和后台websocket服务关闭的时候\n    //   console.log('websocket close')\n    // }\n    // client.onmessage = (msg) => {\n    //   if (msg.data) {\n    //     let json = JSON.parse(msg.data)\n    //     if (json.content && (json.fromuser === this.fromUser && json.touser === this.toUser)\n    //         || json.touser === this.fromUser && json.fromuser === this.toUser) {  // 聊天消息\n    //       this.messages.push(json)\n    //       this.scrollToBottom()  // 滚动页面到最底部\n    //     }\n    //     // 加载消息数字\n    //     if (this.toUser === json.fromuser) {\n    //       this.setUnReadNums()   // 清空正在聊天人的消息数字\n    //     } else {\n    //       this.loadUnReadNums()\n    //     }\n    //   }\n    // }\n\n    // 加载聊天数据\n    this.load();\n\n    // 查询用户\n    request.get('/user').then(res => {\n      res.data = res.data.filter(v => v.role + '_' + v.name !== this.fromUser && v.role === 'ADMIN');\n      this.$set(this.users, 'admin', res.data);\n    });\n    request.get('/user').then(res => {\n      res.data = res.data.filter(v => v.role + '_' + v.name !== this.fromUser && v.role === 'TEACHER');\n      this.$set(this.users, 'teacher', res.data);\n    });\n    request.get('/user').then(res => {\n      res.data = res.data.filter(v => v.role + '_' + v.name !== this.fromUser && v.role === 'STUDENT');\n      this.$set(this.users, 'student', res.data);\n    });\n  },\n  beforeDestroy() {\n    if (client) {\n      client.close();\n    }\n  },\n  // 定义一些页面上控件出发的事件调用的方法\n  methods: {\n    load() {\n      request.get('/imsingle?fromUser=' + this.fromUser + '&toUser=' + this.toUser).then(res => {\n        if (res.code === '0') {\n          this.messages = res.data;\n          this.scrollToBottom(); // 滚动条滚动到最底部\n        } else {\n          this.$notify.error(res.msg);\n        }\n        this.loadUnReadNums();\n      });\n    },\n    setUnReadNums() {\n      request.get('/imsingle?fromUser=' + this.fromUser + '&toUser=' + this.toUser).then(res => {\n        this.loadUnReadNums();\n      });\n    },\n    loadUnReadNums() {\n      // 查询未读数量\n      request.get('/imsingle/unReadNums?toUsername=' + this.fromUser).then(res => {\n        this.unRead = res.data;\n      });\n    },\n    send() {\n      if (!this.toUser) {\n        this.$notify.error('请选择聊天用户');\n        return;\n      }\n      if (client) {\n        let message = this.getMessage('text');\n        client.send(JSON.stringify(message));\n      }\n      document.getElementById('im-content').innerHTML = ''; // 清空输入框\n    },\n\n    selectToUser(item) {\n      this.toUser = item.role + '_' + item.name;\n      this.toAvatar = item.avatar;\n      //查询聊天记录\n      this.load();\n    },\n    download(file) {\n      window.open(file);\n    },\n    getMessage(type) {\n      let inputBox = document.getElementById('im-content');\n      const content = inputBox.innerHTML;\n      if (!content && type === 'text') {\n        this.$notify.error('请输入聊天内容');\n        return;\n      }\n      return {\n        fromuser: this.fromUser,\n        fromavatar: this.user.avatar,\n        touser: this.toUser,\n        toavatar: this.toAvatar,\n        content: content,\n        type: type\n      };\n    },\n    handleFile(file) {\n      if (client) {\n        let message = this.getMessage('img');\n        message.content = file.data;\n        let extName = file.data.substring(file.data.lastIndexOf('.') + 1);\n        if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp'].includes(extName)) {\n          message.type = 'img';\n        } else {\n          message.type = 'file';\n        }\n        client.send(JSON.stringify(message));\n      }\n    },\n    clickEmoji(emoji) {\n      document.getElementById('im-content').innerHTML += emoji;\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        // 设置聊天滚动条到底部\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0];\n        //设置滚动条到最底部\n        imMessageBox.scrollTop = imMessageBox.scrollHeight;\n        console.log('触发滚动');\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","emojis","client","data","user","permission","messages","users","fromUser","toUser","toAvatar","unRead","mounted","split","role","name","load","get","then","res","filter","v","$set","beforeDestroy","close","methods","code","scrollToBottom","$notify","error","msg","loadUnReadNums","setUnReadNums","send","message","getMessage","JSON","stringify","document","getElementById","innerHTML","selectToUser","item","avatar","download","file","window","open","type","inputBox","content","fromuser","fromavatar","touser","toavatar","handleFile","extName","substring","lastIndexOf","includes","clickEmoji","emoji","$nextTick","imMessageBox","getElementsByClassName","scrollTop","scrollHeight","console","log"],"sources":["src/views/front/ImSingle.vue"],"sourcesContent":["<template>\r\n      <div>\r\n        <div style=\"padding: 10px 5px; border-top: 1px solid #ddd; display: flex; align-items: center; width: 100%;\">\r\n            <el-popover placement=\"top\" width=\"300\" trigger=\"click\">\r\n              <div class=\"emoji-box\">\r\n                <span v-for=\"(item, index) in emojis\" :key=\"index\"\r\n                      style=\"margin-right: 5px; font-size: 20px; cursor: pointer\" v-html=\"item\"\r\n                      @click=\"clickEmoji(item)\">\r\n                </span>\r\n              </div>\r\n              <i slot=\"reference\" class=\"fa fa-smile-o\" style=\"font-size: 22px; color: #666;\"></i>\r\n            </el-popover>\r\n            <div style=\"margin-left: 5px\">\r\n              <el-upload action=\"http://localhost:8080/files/upload\" :show-file-list=\"false\" :on-success=\"handleFile\">\r\n                <i class=\"fa fa-folder-open-o\" style=\"font-size: 20px; color: #666;\"></i>\r\n              </el-upload>\r\n            </div>\r\n            <!-- <div id=\"im-content\" contenteditable\r\n                 style=\"flex: 1; background-color: #fff; margin: 0 5px; padding: 10px; border: 1px solid #ddd; border-radius: 2px; outline: none; font-size: 14px;\"></div> -->\r\n            <el-button type=\"primary\" @click=\"send\" style=\"border: none\">发送</el-button>\r\n          </div>\r\n      </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import request from \"@/utils/request\";\r\n  import emojis from \"@/assets/emoji\";\r\n  \r\n  let client\r\n  export default {\r\n    data() {\r\n      return {\r\n        user: {},\r\n        permission: [],\r\n        emojis: [],\r\n        messages: [],\r\n        users: {},\r\n        fromUser: '',\r\n        toUser: '',\r\n        toAvatar: '',\r\n        unRead: {}\r\n      }\r\n    },\r\n    // 页面加载的时候，做一些事情，在created里面\r\n    mounted() {\r\n      this.emojis = emojis.split(',')\r\n     // this.user = JSON.parse(localStorage.getItem('user') || \"{}\")\r\n      this.fromUser = this.user.role + '_' + this.user.name\r\n  \r\n      // client = new WebSocket(`ws://localhost:8080/imserverSingle`)\r\n      // client.onopen = () => {\r\n      //   console.log('websocket open')\r\n      // }\r\n      // client.onclose = () => {  // 页面刷新的时候和后台websocket服务关闭的时候\r\n      //   console.log('websocket close')\r\n      // }\r\n      // client.onmessage = (msg) => {\r\n      //   if (msg.data) {\r\n      //     let json = JSON.parse(msg.data)\r\n      //     if (json.content && (json.fromuser === this.fromUser && json.touser === this.toUser)\r\n      //         || json.touser === this.fromUser && json.fromuser === this.toUser) {  // 聊天消息\r\n      //       this.messages.push(json)\r\n      //       this.scrollToBottom()  // 滚动页面到最底部\r\n      //     }\r\n      //     // 加载消息数字\r\n      //     if (this.toUser === json.fromuser) {\r\n      //       this.setUnReadNums()   // 清空正在聊天人的消息数字\r\n      //     } else {\r\n      //       this.loadUnReadNums()\r\n      //     }\r\n      //   }\r\n      // }\r\n  \r\n      // 加载聊天数据\r\n      this.load()\r\n  \r\n      // 查询用户\r\n          request.get('/user').then(res => {\r\n              res.data = res.data.filter(v => (v.role + '_' + v.name) !== this.fromUser && v.role === 'ADMIN')\r\n              this.$set(this.users, 'admin', res.data)\r\n          })\r\n          request.get('/user').then(res => {\r\n              res.data = res.data.filter(v => (v.role + '_' + v.name) !== this.fromUser && v.role === 'TEACHER')\r\n              this.$set(this.users, 'teacher', res.data)\r\n          })\r\n          request.get('/user').then(res => {\r\n              res.data = res.data.filter(v => (v.role + '_' + v.name) !== this.fromUser && v.role === 'STUDENT')\r\n              this.$set(this.users, 'student', res.data)\r\n          })\r\n  \r\n    },\r\n    beforeDestroy() {\r\n      if (client) {\r\n        client.close()\r\n      }\r\n    },\r\n    // 定义一些页面上控件出发的事件调用的方法\r\n    methods: {\r\n      load() {\r\n        request.get('/imsingle?fromUser=' + this.fromUser + '&toUser=' + this.toUser).then(res => {\r\n          if (res.code === '0') {\r\n            this.messages = res.data\r\n            this.scrollToBottom()  // 滚动条滚动到最底部\r\n          } else {\r\n            this.$notify.error(res.msg)\r\n          }\r\n          this.loadUnReadNums()\r\n        })\r\n      },\r\n      setUnReadNums() {\r\n        request.get('/imsingle?fromUser=' + this.fromUser + '&toUser=' + this.toUser).then(res => {\r\n          this.loadUnReadNums()\r\n        })\r\n      },\r\n      loadUnReadNums() {\r\n        // 查询未读数量\r\n        request.get('/imsingle/unReadNums?toUsername=' + this.fromUser).then(res => {\r\n          this.unRead = res.data\r\n        })\r\n      },\r\n      send() {\r\n        if (!this.toUser) {\r\n          this.$notify.error('请选择聊天用户')\r\n          return\r\n        }\r\n        if (client) {\r\n          let message = this.getMessage('text')\r\n          client.send(JSON.stringify(message))\r\n        }\r\n        document.getElementById('im-content').innerHTML = ''  // 清空输入框\r\n      },\r\n      selectToUser(item) {\r\n        this.toUser = item.role + '_' + item.name\r\n        this.toAvatar = item.avatar\r\n        //查询聊天记录\r\n        this.load()\r\n      },\r\n      download(file) {\r\n        window.open(file)\r\n      },\r\n      getMessage(type) {\r\n        let inputBox = document.getElementById('im-content')\r\n        const content = inputBox.innerHTML\r\n        if (!content && type === 'text') {\r\n          this.$notify.error('请输入聊天内容')\r\n          return\r\n        }\r\n        return {\r\n          fromuser: this.fromUser,\r\n          fromavatar: this.user.avatar,\r\n          touser: this.toUser,\r\n          toavatar: this.toAvatar,\r\n          content: content,\r\n          type: type\r\n        }\r\n      },\r\n      handleFile(file) {\r\n        if (client) {\r\n          let message = this.getMessage('img')\r\n          message.content = file.data\r\n          let extName = file.data.substring(file.data.lastIndexOf('.') + 1)\r\n          if (['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'svg', 'webp'].includes(extName)) {\r\n            message.type = 'img'\r\n          } else {\r\n            message.type = 'file'\r\n          }\r\n          client.send(JSON.stringify(message))\r\n        }\r\n      },\r\n      clickEmoji(emoji) {\r\n        document.getElementById('im-content').innerHTML += emoji\r\n      },\r\n      scrollToBottom() {\r\n        this.$nextTick(() => {\r\n          // 设置聊天滚动条到底部\r\n          let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0]\r\n          //设置滚动条到最底部\r\n          imMessageBox.scrollTop = imMessageBox.scrollHeight\r\n          console.log('触发滚动')\r\n        })\r\n      },\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .im-message-box {\r\n    height: 50vh;\r\n    padding: 10px;\r\n    overflow-y: auto;\r\n    background-color: white;\r\n  }\r\n  \r\n  .emoji-box {\r\n    height: 200px;\r\n    overflow-y: scroll;\r\n    line-height: 30px;\r\n  }\r\n  \r\n  .user-list-box {\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .im-message-box::-webkit-scrollbar, .emoji-box::-webkit-scrollbar, .user-list-box::-webkit-scrollbar {\r\n    width: 4px;\r\n  }\r\n  \r\n  .im-message-box::-webkit-scrollbar-thumb, .emoji-box::-webkit-scrollbar-thumb, .user-list-box::-webkit-scrollbar-thumb {\r\n    border-radius: 10px;\r\n    background: rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .im-message-box::-webkit-scrollbar-track, .emoji-box::-webkit-scrollbar-track, .user-list-box::-webkit-scrollbar-track {\r\n    border-radius: 0;\r\n    background: rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .im-message {\r\n    font-size: 14px;\r\n    padding: 10px;\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n    color: #000;\r\n    max-width: 50%;\r\n    line-height: 20px;\r\n    width: fit-content;\r\n  }\r\n  \r\n  .im-message-left {\r\n    background-color: #fff;\r\n  }\r\n  \r\n  .im-message-right {\r\n    background-color: #26d470;\r\n  }\r\n  \r\n  .im-message-download {\r\n    background-color: #DBEDFF;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .user-list-item {\r\n    display: flex;\r\n    padding: 10px;\r\n    align-items: center;\r\n    border-bottom: 1px solid #eee;\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .user-list-item-badge {\r\n    padding: 2px 6px;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 12px;\r\n    color: white;\r\n    background-color: red;\r\n  }\r\n  \r\n  .user-list-item:nth-last-child(1) {\r\n    border: none;\r\n  }\r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}